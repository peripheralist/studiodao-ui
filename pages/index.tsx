import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { constants, utils } from "ethers";
import TokenBalance from "../components/TokenBalance";

const Home: NextPage = () => {
  const [wallet, setWallet] = useState<string>();
  const [erc20Tokens, setErc20Tokens] = useState<string[]>([]);
  const [erc721Tokens, setErc721Tokens] = useState<string[]>([]);

  const filterCommaSeparatedAddresses = (str: string) =>
    str
      .split(",")
      .map((t) => t.trim())
      .filter(utils.isAddress);

  return (
    <div>
      <Head>
        <title>StudioDAO</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <section>
          <h4>Check ERC20 + ERC721 token balances for any wallet address</h4>
          <label htmlFor="wallet">Wallet</label>
          <input
            id="wallet"
            name="wallet"
            placeholder={constants.AddressZero}
            onChange={(e) => {
              const val = e.target.value;
              setWallet(utils.isAddress(val) ? val : undefined);
            }}
          />
          <br />
          <br />
          <label htmlFor="erc20tokens">ERC20 Tokens</label>
          <textarea
            id="erc20tokens"
            name="erc20tokens"
            placeholder="ERC20 token addresses separated by commas"
            onChange={(e) => {
              const tokens = filterCommaSeparatedAddresses(e.target.value);
              setErc20Tokens(tokens.length ? tokens : []);
            }}
          />
          <br />
          <br />
          <label htmlFor="erc721tokens">ERC721 Tokens</label>
          <textarea
            id="erc721tokens"
            name="erc721tokens"
            placeholder="ERC721 token addresses separated by commas"
            onChange={(e) => {
              const tokens = filterCommaSeparatedAddresses(e.target.value);
              setErc721Tokens(tokens.length ? tokens : []);
            }}
          />
          <br />
          <br />
          {erc721Tokens.length && (
            <div>
              ERC721 tokens
              <br />
              {erc721Tokens.map((t) => (
                <TokenBalance
                  key={t}
                  token={t}
                  tokenType="ERC721"
                  wallet={wallet}
                />
              ))}
            </div>
          )}
          <br />
          {erc20Tokens.length && (
            <div>
              ERC20 tokens
              <br />
              {erc20Tokens.map((t) => (
                <TokenBalance
                  key={t}
                  token={t}
                  tokenType="ERC20"
                  wallet={wallet}
                />
              ))}
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default Home;
